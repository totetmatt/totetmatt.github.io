<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ffmpeg on Toto do stuff</title><link>https://blog.totetmatt.fr/tags/ffmpeg/</link><description>Recent content in Ffmpeg on Toto do stuff</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 05 Jun 2021 11:00:00 +0100</lastBuildDate><atom:link href="https://blog.totetmatt.fr/tags/ffmpeg/index.xml" rel="self" type="application/rss+xml"/><item><title>How to Capture your Bonzomatic with FFmpeg</title><link>https://blog.totetmatt.fr/posts/2021-06-05_bonzomatic_ffmpeg/</link><pubDate>Sat, 05 Jun 2021 11:00:00 +0100</pubDate><guid>https://blog.totetmatt.fr/posts/2021-06-05_bonzomatic_ffmpeg/</guid><description>&lt;p>Got to work on this website &lt;a href="https://psenough.github.io/shader_summary/">https://psenough.github.io/shader_summary/&lt;/a> that try to gather all graphical live coding events performed in the past.&lt;/p>
&lt;p>Basically, for people that don’t know, it’s live coding performance done, sometime as a competition, sometime as a jam, where folks create real time graphics stuff.&lt;/p>
&lt;p>One of the common tool used is Bonzomatic , it’s a simple application that use OpenGL to render a rectangle that fit to the application screen and then you can live edit the Framgment Shader that determine what should be the color of the pixel.&lt;/p></description><content>&lt;p>Got to work on this website &lt;a href="https://psenough.github.io/shader_summary/">https://psenough.github.io/shader_summary/&lt;/a> that try to gather all graphical live coding events performed in the past.&lt;/p>
&lt;p>Basically, for people that don’t know, it’s live coding performance done, sometime as a competition, sometime as a jam, where folks create real time graphics stuff.&lt;/p>
&lt;p>One of the common tool used is Bonzomatic , it’s a simple application that use OpenGL to render a rectangle that fit to the application screen and then you can live edit the Framgment Shader that determine what should be the color of the pixel.&lt;/p>
&lt;p>Problem was we got a lot of entries but no preview images. Which is quite sad for a graphics discipline.&lt;/p>
&lt;p>After spending an afternoon coding into bonzomatic to find a way to export the bufferframe to an image (was almost here, I think I was missing some color format alignment) I thought about maybe a simpler solution using the best tool ever : FFmpeg.&lt;/p>
&lt;p>If we look at the website, there is a way (in Windows at least) to capture an application windows (&lt;a href="https://trac.ffmpeg.org/wiki/Capture/Desktop">https://trac.ffmpeg.org/wiki/Capture/Desktop&lt;/a>) .&lt;/p>
&lt;p>So using this gdigrab format and using the window’s name, you can capture the input like this :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>ffmpeg -f gdigrab -i &lt;span style="color:#e6db74">&amp;#39;title=BONZOMATIC - GLFW&amp;#39;&lt;/span> -vframes &lt;span style="color:#ae81ff">1&lt;/span> -q:v &lt;span style="color:#ae81ff">2&lt;/span> -y snapshot.jpg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Some notes :&lt;/p>
&lt;ul>
&lt;li>It will also capture the mouse if it’s inside, so be careful (maybe an option)&lt;/li>
&lt;li>If you don’t use fullscreen, it will capture only the “content” of the window, not the menu bar. Which mean that if you maximise, the output resolution will be the screen resolution minus the menu bar + other window frame.&lt;/li>
&lt;li>You might want to add a -s 1 before the input to let the application start and / or let ffmpeg get warm before starting a record&lt;/li>
&lt;/ul>
&lt;p>Of course now you can also export as video. Here is an example of a ffmpeg command that render 10 seconds to mp4 :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>ffmpeg -ss &lt;span style="color:#ae81ff">1&lt;/span> -t &lt;span style="color:#ae81ff">10&lt;/span> -y -framerate &lt;span style="color:#ae81ff">60&lt;/span> -f gdigrab -vsync &lt;span style="color:#ae81ff">0&lt;/span> -hwaccel cuda -hwaccel_output_format cuda -i &lt;span style="color:#e6db74">&amp;#39;title=BONZOMATIC - GLFW&amp;#39;&lt;/span> -c:a copy -c:v h264_nvenc -tune hq -b:v 20M -bufsize 20M -maxrate 50M -qmin &lt;span style="color:#ae81ff">0&lt;/span> -g &lt;span style="color:#ae81ff">250&lt;/span> -bf &lt;span style="color:#ae81ff">3&lt;/span> -b_ref_mode middle -temporal-aq &lt;span style="color:#ae81ff">1&lt;/span> -rc-lookahead &lt;span style="color:#ae81ff">20&lt;/span> -i_qfactor 0.75 -b_qfactor 1.1 out.mp4
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>(I copy pasted some config + blind tweak. Can&amp;rsquo;t really explain the options but was happy with result)&lt;/em>&lt;/p>
&lt;p>I’m using nvidia_env as it’s much faster for encoding and avoid issues I got with the normal libx264.&lt;/p>
&lt;p>Need to check more in detail for Sound capture at the same time and see if there is different input format to play with.&lt;/p></content></item><item><title>Twitch and FFmpeg and Youtube-dl: Fetch from live stream to local file</title><link>https://blog.totetmatt.fr/posts/2020-10-13_twitch-and-ffmpeg-with-some-youtube-dl-help-fetch-from-live-stream-to-local-file/</link><pubDate>Sat, 03 Oct 2020 11:00:00 +0100</pubDate><guid>https://blog.totetmatt.fr/posts/2020-10-13_twitch-and-ffmpeg-with-some-youtube-dl-help-fetch-from-live-stream-to-local-file/</guid><description>&lt;p>&lt;em>(Using Windows PowerShell, adapt for UNIX bash shouldn’t be a big issue)&lt;/em>&lt;/p>
&lt;h1 id="record-a-live-stream">Record a live stream&lt;/h1>
&lt;p>So something nice with youtube-dl is like you can ask not to download the media but to fetch for the media link :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt; youtube-dl -g https://www.youtube.com/watch?v&lt;span style="color:#f92672">=&lt;/span>RJt01u4yrLQ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>https://r2---sn-h0jeened.googlevideo.com/videoplayback?expire&lt;span style="color:#f92672">=&lt;/span>1&lt;span style="color:#f92672">[&lt;/span>...&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you use that for a twitch channel that is streaming live, it returns you the HLS stream.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt; youtube-dl -g https://www.twitch.tv/farore_de_firone
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>https://video-weaver.ber01.hls.ttvnw.net/v1/playlist/CpkEQusnrcdffNI3&lt;span style="color:#f92672">[&lt;/span>..&lt;span style="color:#f92672">]&lt;/span>MA2c4.m3u8
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It by default binds to the best quality video, but you can check and select all format available using -F&lt;/p></description><content>&lt;p>&lt;em>(Using Windows PowerShell, adapt for UNIX bash shouldn’t be a big issue)&lt;/em>&lt;/p>
&lt;h1 id="record-a-live-stream">Record a live stream&lt;/h1>
&lt;p>So something nice with youtube-dl is like you can ask not to download the media but to fetch for the media link :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt; youtube-dl -g https://www.youtube.com/watch?v&lt;span style="color:#f92672">=&lt;/span>RJt01u4yrLQ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>https://r2---sn-h0jeened.googlevideo.com/videoplayback?expire&lt;span style="color:#f92672">=&lt;/span>1&lt;span style="color:#f92672">[&lt;/span>...&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you use that for a twitch channel that is streaming live, it returns you the HLS stream.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt; youtube-dl -g https://www.twitch.tv/farore_de_firone
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>https://video-weaver.ber01.hls.ttvnw.net/v1/playlist/CpkEQusnrcdffNI3&lt;span style="color:#f92672">[&lt;/span>..&lt;span style="color:#f92672">]&lt;/span>MA2c4.m3u8
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It by default binds to the best quality video, but you can check and select all format available using -F&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt; youtube-dl -F https://www.twitch.tv/farore_de_firone
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>twitch:stream&lt;span style="color:#f92672">]&lt;/span> farore_de_firone: Downloading stream GraphQL
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>twitch:stream&lt;span style="color:#f92672">]&lt;/span> farore_de_firone: Downloading access token JSON
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>twitch:stream&lt;span style="color:#f92672">]&lt;/span> 39653517372: Downloading m3u8 information
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>info&lt;span style="color:#f92672">]&lt;/span> Available formats &lt;span style="color:#66d9ef">for&lt;/span> 39653517372:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>format code extension resolution note
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>audio_only mp4 audio only 2k , mp4a.40.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>160p mp4 284x160 230k , avc1.4D401F, 30.0fps, mp4a.40.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>360p mp4 640x360 630k , avc1.4D401F, 30.0fps, mp4a.40.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>480p mp4 852x480 1262k , avc1.4D401F, 30.0fps, mp4a.40.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>720p60 mp4 1280x720 3257k , avc1.4D401F, 60.0fps, mp4a.40.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1080p60__source_ mp4 1920x1080 6713k , avc1.64002A, 60.0fps, mp4a.40.2 &lt;span style="color:#f92672">(&lt;/span>best&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You could even only have the audio-stream&lt;/p>
&lt;p>And to select it&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>youtube-dl -f 160p -g https://www.twitch.tv/farore_de_firone
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>So with this link, you can use ffmpeg to record localy the stream to your computer (and have your own reaplay / VOD without the “disagreement” of Twitch VOD :) )&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>ffmpeg -i &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>youtube-dl -f 720p60 -g https://www.twitch.tv/farore_de_firone&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> -c copy stream.20201012.mp4
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And here it’s quite simple “dump” of the running script. Nothing prevent you to add some filters, reencoding that adapt to your needs.&lt;/p>
&lt;h1 id="mixing-multiple-stream">Mixing multiple stream&lt;/h1>
&lt;p>Let’s have some fun, there is some streamers that plays together on the same game. Usually, you can watch their POV at the sametime with the Twitch Squad mechanism or Multitwitch application. But would it be possible to record a file in such way ?&lt;/p>
&lt;p>Actually yes, ffmpeg can take multiple video input and transform it on the fly via the filter complex to render all the video on the same stream.&lt;/p>
&lt;p>There is a nice topic on Stackoverflow that explain how to simply stack multiple video : &lt;a href="https://stackoverflow.com/questions/11552565/vertically-or-horizontally-stack-mosaic-several-videos-using-ffmpeg">https://stackoverflow.com/questions/11552565/vertically-or-horizontally-stack-mosaic-several-videos-using-ffmpeg&lt;/a>&lt;/p>
&lt;p>Example merging 2 videos :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>ffmpeg -i &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>youtube-dl -g https://www.twitch.tv/antoinedaniellive&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -i &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>youtube-dl -g https://www.twitch.tv/soon&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -filter_complex vstack&lt;span style="color:#f92672">=&lt;/span>inputs&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -map 0:a &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> output.mp4
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Example merging 4 videos :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>ffmpeg -i &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>youtube-dl -f 160p -g https://www.twitch.tv/antoinedaniellive&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -i &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>youtube-dl -f 160p -g https://www.twitch.tv/soon&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -i &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>youtube-dl -f 160p -g https://www.twitch.tv/angledroit &lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -i &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>youtube-dl -f 160p -g https://www.twitch.tv/etoiles&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -filter_complex &lt;span style="color:#e6db74">&amp;#34;[0:v][1:v][2:v][3:v]xstack=inputs=4:layout=0_0|w0_0|0_h0|w0_h0[v]&amp;#34;&lt;/span> -map &lt;span style="color:#e6db74">&amp;#34;[v]&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -map 0:a &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -y output.mp4
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note : it’s better to stack video vertically. Horizontal stack does works but then some services (like twitter) won’t accept the video because the image ratio will be too extreme.&lt;/p>
&lt;p>The -map 0:a here is necessary to select which audio you want to have.&lt;/p>
&lt;p>The format mkv also allow to record multiple video stream within one file that you can selected after that :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>ffmpeg -i &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>youtube-dl -g https://www.twitch.tv/alphacast&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\ &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -i &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>youtube-dl -g https://www.twitch.tv/colas_bim&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -i &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>youtube-dl -g https://www.twitch.tv/eventisfr&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -i &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>youtube-dl -g https://www.twitch.tv/fusiow&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -map 0:1 -map 1:1 -map 2:1 -map 3:1 -map 0:0 &lt;span style="color:#ae81ff">\ &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -c copy &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> out.mkv
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>Extract chapters from Youtube Media</title><link>https://blog.totetmatt.fr/posts/2020-06-26_extract-chapters-youtube-media/</link><pubDate>Fri, 26 Jun 2020 11:00:00 +0100</pubDate><guid>https://blog.totetmatt.fr/posts/2020-06-26_extract-chapters-youtube-media/</guid><description>&lt;blockquote>
&lt;p>Update: Since a while, &lt;code>youtube-dl&lt;/code> isn&amp;rsquo;t as powerful as it is. Fortunatelly another fork exists : &lt;code>yt-dlp&lt;/code> . Use this instead&lt;/p>&lt;/blockquote>
&lt;p>Youtube recently got this “chapter” concept where it fragment a long video with chapters. I think this data might be parsed from the description of the video done, as they already parse any timestamp available for a while now.&lt;/p>
&lt;p>Thanks to &lt;code>youtube-dl&lt;/code>, we can download thena video and the metadata which now contains this chapter data.&lt;/p></description><content>&lt;blockquote>
&lt;p>Update: Since a while, &lt;code>youtube-dl&lt;/code> isn&amp;rsquo;t as powerful as it is. Fortunatelly another fork exists : &lt;code>yt-dlp&lt;/code> . Use this instead&lt;/p>&lt;/blockquote>
&lt;p>Youtube recently got this “chapter” concept where it fragment a long video with chapters. I think this data might be parsed from the description of the video done, as they already parse any timestamp available for a while now.&lt;/p>
&lt;p>Thanks to &lt;code>youtube-dl&lt;/code>, we can download thena video and the metadata which now contains this chapter data.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-terminal" data-lang="terminal">$ youtube-dl --write-info-json -x --audio-format mp3 https://www.youtube.com/watch?v=HZTStHzWRxM
[youtube] HZTStHzWRxM: Downloading webpage
[info] Writing video description metadata as JSON to: The New Youtube Chapter Timestamp Feature-HZTStHzWRxM.info.json
[download] Destination: The New Youtube Chapter Timestamp Feature-HZTStHzWRxM.webm
[download] 100% of 3.22MiB in 00:00
[ffmpeg] Destination: The New Youtube Chapter Timestamp Feature-HZTStHzWRxM.mp3
Deleting original file The New Youtube Chapter Timestamp Feature-HZTStHzWRxM.webm (pass -k to keep)
&lt;/code>&lt;/pre>&lt;p>We will use &lt;a href="https://www.youtube.com/watch?v=HZTStHzWRxM">https://www.youtube.com/watch?v=HZTStHzWRxM&lt;/a> as example.&lt;/p>
&lt;p>The command above will download the video file, transcode it to mp3 and also download the metadata in a json format. We have now 2 files :&lt;/p>
&lt;ul>
&lt;li>&lt;code>The New Youtube Chapter Timestamp Feature-HZTStHzWRxM.info.json&lt;/code> that contains data&lt;/li>
&lt;li>&lt;code>The New Youtube Chapter Timestamp Feature-HZTStHzWRxM.mp3&lt;/code> that is the media&lt;/li>
&lt;/ul>
&lt;p>&lt;code>jq&lt;/code> is a wonderful command line to manipulate json on bash. We can for example get the title of the video like this :&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-terminal" data-lang="terminal">$ cat The\ New\ Youtube\ Chapter\ Timestamp\ Feature-HZTStHzWRxM.info.json | jq -r .title | sed -e &amp;#39;s/[^A-Za-z0-9._-]/_/g&amp;#39;
The_New_Youtube_Chapter_Timestamp_Feature
&lt;/code>&lt;/pre>&lt;p>The sed here is to make sure we won’t have special characters that might lead to some error later.&lt;/p>
&lt;p>The &lt;code>-r&lt;/code> on &lt;code>jq&lt;/code> indicate to return “raw text”. By default, &lt;code>jq&lt;/code> will use some syntax colorization and keep some sepcial character that might leads to some issue.&lt;/p>
&lt;p>If available, &lt;code>Youtube-dl&lt;/code> info json contains a chapters array that contain all the chapters with their &lt;code>start_time&lt;/code> , &lt;code>end_time&lt;/code> and &lt;code>title&lt;/code> .&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-terminal" data-lang="terminal">$ cat The\ New\ Youtube\ Chapter\ Timestamp\ Feature-HZTStHzWRxM.info.json |\
jq -r &amp;#39;.chapters[]&amp;#39;
{
&amp;#34;start_time&amp;#34;: 0,
&amp;#34;end_time&amp;#34;: 17,
&amp;#34;title&amp;#34;: &amp;#34;The new feature&amp;#34;
}
{
&amp;#34;start_time&amp;#34;: 17,
&amp;#34;end_time&amp;#34;: 76,
&amp;#34;title&amp;#34;: &amp;#34;Slow roll-out&amp;#34;
}
{
&amp;#34;start_time&amp;#34;: 76,
&amp;#34;end_time&amp;#34;: 124,
&amp;#34;title&amp;#34;: &amp;#34;How it works&amp;#34;
}
{
&amp;#34;start_time&amp;#34;: 124,
&amp;#34;end_time&amp;#34;: 180,
&amp;#34;title&amp;#34;: &amp;#34;Problems / suggestions for the future&amp;#34;
}
&lt;/code>&lt;/pre>&lt;p>The idea now is to use each dict entry here as parameters for ffmpeg to split the media according to the chapters data. As we are in bash, current json representation will be quite hard to use it like that, so we need to transform a little bit the representation here to use the output of &lt;code>jq&lt;/code> in a pipe and in &lt;code>xarg&lt;/code>s.&lt;/p>
&lt;p>What also we need to take into consideration is that ffmpeg can split a media by giving the option &lt;code>-ss&lt;/code> to know where to start and &lt;code>-t&lt;/code> to know the duration of the cut, not the end time. As the information on the json gives us a start and end time, we need to perfom a simple substraction to have the start time and the duration.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-terminal" data-lang="terminal">$ cat The\ New\ Youtube\ Chapter\ Timestamp\ Feature-HZTStHzWRxM.info.json |\
jq -r &amp;#39;.chapters[] | .start_time,.end_time-.start_time,.title &amp;#39; |\
sed &amp;#39;s/&amp;#34;//g&amp;#39;
0
17
The new feature
17
59
Slow roll-out
76
48
How it works
124
56
Problems / suggestions for the future
&lt;/code>&lt;/pre>&lt;p>Thanks to &lt;code>jq&lt;/code>, we can perfom simple math operation directly on the command to compute the duration. sed here again is only for cleaning up special characters.&lt;/p>
&lt;p>Now, we can pipe the wonderful xargs to use the output as parameter and trigger a &lt;code>ffmpeg&lt;/code> command&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-terminal" data-lang="terminal">$ cat The\ New\ Youtube\ Chapter\ Timestamp\ Feature-HZTStHzWRxM.info.json|\
jq -r &amp;#39;.chapters[] | .start_time,.end_time-.start_time,.title &amp;#39; |\
sed -e &amp;#39;s/[^A-Za-z0-9._-]/_/g&amp;#39; |\
xargs -n3 -t -d&amp;#39;\n&amp;#39; sh -c &amp;#39;ffmpeg -y -ss $0 -i &amp;#34;The New Youtube Chapter Timestamp Feature-HZTStHzWRxM.mp3&amp;#34; -t $1 -codec:a copy &amp;#34;$2.mp3&amp;#34;&amp;#39;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;code>-n3&lt;/code> indicate to take parameters 3 by 3*&lt;/li>
&lt;li>&lt;code>-t&lt;/code> is only to debug as it will print each command xargs will execute&lt;/li>
&lt;li>&lt;code>-d'\n'&lt;/code> indicate that parameters are separated by &lt;code>\n&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>What is cool is that we could potentially parallelize the process here by adding to &lt;code>xargs&lt;/code> the parameter &lt;code>-P X&lt;/code> to run the multiple ffmpeg invokation in parallel.&lt;/p>
&lt;p>On ffmpeg side, nothing tremendous :&lt;/p>
&lt;ul>
&lt;li>&lt;code>-ss&lt;/code> and &lt;code>-t&lt;/code> has been already explain as start time and duration,&lt;/li>
&lt;li>&lt;code>-codec:a&lt;/code> copy indicate that we keep everything same as the original file in terms of codec, so no re-encoding for the output file, which means it’s going fast&lt;/li>
&lt;li>&lt;code>-y&lt;/code> to avoid prompt and force override of existing output file&lt;/li>
&lt;/ul>
&lt;p>That works quite well. It might be possible to fully one line it, but let’s put a proper script to ease the usage of this.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/sh
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>set -x
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#Download media + metadata&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>youtube-dl --write-info-json -x --audio-format mp3 -o &lt;span style="color:#e6db74">&amp;#34;tmp_out.%(ext)s&amp;#34;&lt;/span> $1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Maybe a way to get the file name from previous function&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>INFO&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;tmp_out.info.json&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>AUDIO&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;tmp_out.mp3&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo :: $INFO $AUDIO ::
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Fetch the title&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TITLE&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>cat &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$INFO&lt;span style="color:#e6db74">&amp;#34;&lt;/span> | jq -r .title | sed -e &lt;span style="color:#e6db74">&amp;#39;s/[^A-Za-z0-9._-]/_/g&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># ^--- Remove all weird character as we want to use it as filename&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># We will put all chapter into a directory&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mkdir &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$TITLE&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Chapterization&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cat &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$INFO&lt;span style="color:#e6db74">&amp;#34;&lt;/span> |&lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>jq -r &lt;span style="color:#e6db74">&amp;#39;.chapters[] | .start_time,.end_time-.start_time,.title &amp;#39;&lt;/span> |&lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>sed -e &lt;span style="color:#e6db74">&amp;#39;s/[^A-Za-z0-9._-]/_/g&amp;#39;&lt;/span> |&lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>xargs -n3 -t -d&lt;span style="color:#e6db74">&amp;#39;\n&amp;#39;&lt;/span> sh -c &lt;span style="color:#e6db74">&amp;#34;ffmpeg -y -ss \$0 -i \&amp;#34;&lt;/span>$AUDIO&lt;span style="color:#e6db74">\&amp;#34; -to \$1 -codec:a copy -f mp3 \&amp;#34;&lt;/span>$TITLE&lt;span style="color:#e6db74">/\$2.mp3\&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#Remove tmp file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rm tmp_out*
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The script file here : &lt;a href="https://gist.github.com/totetmatt/b4bf50c62642e5a9e1bf6365a47e19c6">https://gist.github.com/totetmatt/b4bf50c62642e5a9e1bf6365a47e19c6&lt;/a>&lt;/p>
&lt;p>No big change on the global approach just something to becareful : Yes, there is a hell quote escape game to play and it might not be pleasant ….&lt;/p>
&lt;p>To explain the last part, as far as I understand it, the string will be evaluated multiple time :&lt;/p>
&lt;ul>
&lt;li>First time will be at “script level”, so it will replace any $VARIABLE present in the script like &lt;code>$AUDIO&lt;/code> and &lt;code>$TITLE&lt;/code>&lt;/li>
&lt;li>Second time will be at &lt;code>xargs&lt;/code> / &lt;code>sh -c&lt;/code> invokation where then it’s possible to use &lt;code>$0&lt;/code> &lt;code>$1&lt;/code> and &lt;code>$2&lt;/code>. But if we don’t escape it first, theses variables will be evaluated at the first round, that’s why we need to backslash it &lt;code>\$0, \$1, \$2&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>You can see the result of the string after the 1st evaluation thanks to the &lt;code>-t&lt;/code> option of &lt;code>xargs&lt;/code> :&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-terminal" data-lang="terminal">sh -c &amp;#39;ffmpeg -y -ss $0 -i &amp;#34;The New Youtube Chapter Timestamp Feature-HZTStHzWRxM.mp3&amp;#34; -to $1 -codec:a copy -f mp3 &amp;#34;The_New_Youtube_Chapter_Timestamp_Feature/$2.mp3&amp;#34;&amp;#39; 124 56 Problems___suggestions_for_the_future
&lt;/code>&lt;/pre>&lt;p>There might be other and better way to deal wih the args parsing, the string escape and the string cleanup, but current solution works enough :)&lt;/p></content></item></channel></rss>