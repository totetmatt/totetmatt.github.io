<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bonzomatic on Toto do stuff</title><link>https://blog.totetmatt.fr/tags/bonzomatic/</link><description>Recent content in Bonzomatic on Toto do stuff</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 05 Jun 2021 11:00:00 +0100</lastBuildDate><atom:link href="https://blog.totetmatt.fr/tags/bonzomatic/index.xml" rel="self" type="application/rss+xml"/><item><title>How to Capture your Bonzomatic with FFmpeg</title><link>https://blog.totetmatt.fr/posts/2021-06-05_bonzomatic_ffmpeg/</link><pubDate>Sat, 05 Jun 2021 11:00:00 +0100</pubDate><guid>https://blog.totetmatt.fr/posts/2021-06-05_bonzomatic_ffmpeg/</guid><description>&lt;p>Got to work on this website &lt;a href="https://psenough.github.io/shader_summary/">https://psenough.github.io/shader_summary/&lt;/a> that try to gather all graphical live coding events performed in the past.&lt;/p>
&lt;p>Basically, for people that don’t know, it’s live coding performance done, sometime as a competition, sometime as a jam, where folks create real time graphics stuff.&lt;/p>
&lt;p>One of the common tool used is Bonzomatic , it’s a simple application that use OpenGL to render a rectangle that fit to the application screen and then you can live edit the Framgment Shader that determine what should be the color of the pixel.&lt;/p></description><content>&lt;p>Got to work on this website &lt;a href="https://psenough.github.io/shader_summary/">https://psenough.github.io/shader_summary/&lt;/a> that try to gather all graphical live coding events performed in the past.&lt;/p>
&lt;p>Basically, for people that don’t know, it’s live coding performance done, sometime as a competition, sometime as a jam, where folks create real time graphics stuff.&lt;/p>
&lt;p>One of the common tool used is Bonzomatic , it’s a simple application that use OpenGL to render a rectangle that fit to the application screen and then you can live edit the Framgment Shader that determine what should be the color of the pixel.&lt;/p>
&lt;p>Problem was we got a lot of entries but no preview images. Which is quite sad for a graphics discipline.&lt;/p>
&lt;p>After spending an afternoon coding into bonzomatic to find a way to export the bufferframe to an image (was almost here, I think I was missing some color format alignment) I thought about maybe a simpler solution using the best tool ever : FFmpeg.&lt;/p>
&lt;p>If we look at the website, there is a way (in Windows at least) to capture an application windows (&lt;a href="https://trac.ffmpeg.org/wiki/Capture/Desktop">https://trac.ffmpeg.org/wiki/Capture/Desktop&lt;/a>) .&lt;/p>
&lt;p>So using this gdigrab format and using the window’s name, you can capture the input like this :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>ffmpeg -f gdigrab -i &lt;span style="color:#e6db74">&amp;#39;title=BONZOMATIC - GLFW&amp;#39;&lt;/span> -vframes &lt;span style="color:#ae81ff">1&lt;/span> -q:v &lt;span style="color:#ae81ff">2&lt;/span> -y snapshot.jpg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Some notes :&lt;/p>
&lt;ul>
&lt;li>It will also capture the mouse if it’s inside, so be careful (maybe an option)&lt;/li>
&lt;li>If you don’t use fullscreen, it will capture only the “content” of the window, not the menu bar. Which mean that if you maximise, the output resolution will be the screen resolution minus the menu bar + other window frame.&lt;/li>
&lt;li>You might want to add a -s 1 before the input to let the application start and / or let ffmpeg get warm before starting a record&lt;/li>
&lt;/ul>
&lt;p>Of course now you can also export as video. Here is an example of a ffmpeg command that render 10 seconds to mp4 :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>ffmpeg -ss &lt;span style="color:#ae81ff">1&lt;/span> -t &lt;span style="color:#ae81ff">10&lt;/span> -y -framerate &lt;span style="color:#ae81ff">60&lt;/span> -f gdigrab -vsync &lt;span style="color:#ae81ff">0&lt;/span> -hwaccel cuda -hwaccel_output_format cuda -i &lt;span style="color:#e6db74">&amp;#39;title=BONZOMATIC - GLFW&amp;#39;&lt;/span> -c:a copy -c:v h264_nvenc -tune hq -b:v 20M -bufsize 20M -maxrate 50M -qmin &lt;span style="color:#ae81ff">0&lt;/span> -g &lt;span style="color:#ae81ff">250&lt;/span> -bf &lt;span style="color:#ae81ff">3&lt;/span> -b_ref_mode middle -temporal-aq &lt;span style="color:#ae81ff">1&lt;/span> -rc-lookahead &lt;span style="color:#ae81ff">20&lt;/span> -i_qfactor 0.75 -b_qfactor 1.1 out.mp4
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>(I copy pasted some config + blind tweak. Can&amp;rsquo;t really explain the options but was happy with result)&lt;/em>&lt;/p>
&lt;p>I’m using nvidia_env as it’s much faster for encoding and avoid issues I got with the normal libx264.&lt;/p>
&lt;p>Need to check more in detail for Sound capture at the same time and see if there is different input format to play with.&lt;/p></content></item></channel></rss>